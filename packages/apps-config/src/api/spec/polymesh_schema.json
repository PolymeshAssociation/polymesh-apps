{
  "types": {
    "BTreeSet<Bytes>": "Vec<Bytes>",
    "BTreeSet<PolymeshPrimitivesStatisticsStatUpdate>": "Vec<PolymeshPrimitivesStatisticsStatUpdate>",
    "BTreeSet<PolymeshPrimitivesStatisticsStatType>": "Vec<PolymeshPrimitivesStatisticsStatType>",
    "BTreeSet<PolymeshPrimitivesTransferComplianceTransferCondition>": "Vec<PolymeshPrimitivesTransferComplianceTransferCondition>",
    "BTreeSet<PolymeshPrimitivesIdentityId>": "Vec<PolymeshPrimitivesIdentityId>",
    "BTreeSet<PolymeshPrimitivesTicker>": "Vec<PolymeshPrimitivesTicker>",
    "BTreeSet<PolymeshPrimitivesSecondaryKeyPalletPermissions>": "Vec<PolymeshPrimitivesSecondaryKeyPalletPermissions>",
    "BTreeSet<PolymeshPrimitivesIdentityIdPortfolioId>": "Vec<PolymeshPrimitivesIdentityIdPortfolioId>"
  },
  "rpc": {
    "compliance": {
      "canTransfer": {
        "description": "Checks whether a transaction with given parameters is compliant to the compliance manager conditions",
        "params": [
          {
            "name": "ticker",
            "type": "Ticker",
            "isOptional": false
          },
          {
            "name": "from_did",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "to_did",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "AssetComplianceResult"
      }
    },
    "identity": {
      "isIdentityHasValidCdd": {
        "description": "use to tell whether the given did has valid cdd claim or not",
        "params": [
          {
            "name": "did",
            "type": "IdentityId",
            "isOptional": false
          },
          {
            "name": "buffer_time",
            "type": "u64",
            "isOptional": true
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "CddStatus"
      },
      "getAssetDid": {
        "description": "function is used to query the given ticker DID",
        "params": [
          {
            "name": "ticker",
            "type": "Ticker",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "AssetDidResult"
      },
      "getDidRecords": {
        "description": "Used to get the did record values for a given DID",
        "params": [
          {
            "name": "did",
            "type": "IdentityId",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "RpcDidRecords"
      },
      "getDidStatus": {
        "description": "Retrieve status of the DID",
        "params": [
          {
            "name": "did",
            "type": "Vec<IdentityId>",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<DidStatus>"
      },
      "getFilteredAuthorizations": {
        "description": "Retrieve authorizations data for a given signatory and filtered using the given authorization type",
        "params": [
          {
            "name": "signatory",
            "type": "Signatory",
            "isOptional": false
          },
          {
            "name": "allow_expired",
            "type": "bool",
            "isOptional": false
          },
          {
            "name": "auth_type",
            "type": "AuthorizationType",
            "isOptional": true
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<Authorization>"
      },
      "getKeyIdentityData": {
        "description": "Query relation between a signing key and a DID",
        "params": [
          {
            "name": "acc",
            "type": "AccountId",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Option<KeyIdentityData>"
      }
    },
    "pips": {
      "getVotes": {
        "description": "Summary of votes of a proposal given by index",
        "params": [
          {
            "name": "index",
            "type": "PipId",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "VoteCount"
      },
      "proposedBy": {
        "description": "Retrieves proposal indices started by address",
        "params": [
          {
            "name": "address",
            "type": "AccountId",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<PipId>"
      },
      "votedOn": {
        "description": "Retrieves proposal address indices voted on",
        "params": [
          {
            "name": "address",
            "type": "AccountId",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<PipId>"
      }
    },
    "protocolFee": {
      "computeFee": {
        "description": "Gets the fee of a chargeable extrinsic operation",
        "params": [
          {
            "name": "op",
            "type": "ProtocolOp",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "CappedFee"
      }
    },
    "staking": {
      "getCurve": {
        "description": "Retrieves curves parameters",
        "params": [
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<(Perbill, Perbill)>"
      }
    },
    "asset": {
      "canTransfer": {
        "description": "Checks whether a transaction with given parameters can take place or not",
        "params": [
          {
            "name": "sender",
            "type": "AccountId",
            "isOptional": false
          },
          {
            "name": "from_custodian",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "from_portfolio",
            "type": "PortfolioId",
            "isOptional": false
          },
          {
            "name": "to_custodian",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "to_portfolio",
            "type": "PortfolioId",
            "isOptional": false
          },
          {
            "name": "ticker",
            "type": "Ticker",
            "isOptional": false
          },
          {
            "name": "value",
            "type": "Balance",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "CanTransferResult"
      },
      "canTransferGranular": {
        "description": "Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.",
        "params": [
          {
            "name": "from_custodian",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "from_portfolio",
            "type": "PortfolioId",
            "isOptional": false
          },
          {
            "name": "to_custodian",
            "type": "Option<IdentityId>",
            "isOptional": false
          },
          {
            "name": "to_portfolio",
            "type": "PortfolioId",
            "isOptional": false
          },
          {
            "name": "ticker",
            "type": "Ticker",
            "isOptional": false
          },
          {
            "name": "value",
            "type": "Balance",
            "isOptional": false
          },
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "GranularCanTransferResult"
      }
    },
    "group": {
      "getCDDValidMembers": {
        "description": "Get the CDD members",
        "params": [
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<Member>"
      },
      "getGCValidMembers": {
        "description": "Get the GC members",
        "params": [
          {
            "name": "blockHash",
            "type": "Hash",
            "isOptional": true
          }
        ],
        "type": "Vec<Member>"
      }
    }
  }
}